<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RSE at Sheffield (Posts by David Jones)</title><link>http://rse.shef.ac.uk/</link><description></description><atom:link href="http://rse.shef.ac.uk/authors/david-jones.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 10 Jan 2019 10:58:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Fun with strace</title><link>http://rse.shef.ac.uk/blog/fun-with-strace/</link><dc:creator>David Jones</dc:creator><description>&lt;div&gt;&lt;h3&gt;How I solved a mystery with strace and bash&lt;/h3&gt;
&lt;p&gt;So I'm dabbling with &lt;code&gt;iceberg&lt;/code&gt;, The University of Sheffield's HPC, and
I finally get round to putting my &lt;a href="https://github.com/drj11/dot"&gt;&lt;code&gt;.profile&lt;/code&gt;&lt;/a&gt; on there.
And I remember that I don't like
the way &lt;code&gt;less&lt;/code&gt; clears the screen when I've finished reading a &lt;code&gt;man&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;I need to set my &lt;code&gt;LESS&lt;/code&gt; environment variable to &lt;code&gt;-X&lt;/code&gt;.
So I &lt;a href="https://github.com/drj11/dot/commit/7d097ba875e2cca186b8d659d3510c2af5c8df1b"&gt;add that to my &lt;code&gt;.profile&lt;/code&gt;&lt;/a&gt;.
I do &lt;code&gt;exec bash -l&lt;/code&gt; to emulate logging back in.&lt;/p&gt;
&lt;p&gt;Doesn't work.
Still clears screen when reading man pages.
Turns out &lt;code&gt;LESS&lt;/code&gt; isn't set.
What is going wrong with my &lt;code&gt;.profile&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I'm becoming a fan of &lt;code&gt;strace&lt;/code&gt; for this sort of debugging.&lt;/p&gt;
&lt;p&gt;Have a look at this. When I run this command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;strace -e signal= -e open bash -l -c 'echo SCRIPT GOT HERE'
&lt;/pre&gt;


&lt;p&gt;I get this output (long and boring, skip and come back to the
bits I refer to):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;open("/etc/ld.so.cache", O_RDONLY)      = 3
open("/lib64/libtinfo.so.5", O_RDONLY)  = 3
open("/lib64/libdl.so.2", O_RDONLY)     = 3
open("/lib64/libc.so.6", O_RDONLY)      = 3
open("/dev/tty", O_RDWR|O_NONBLOCK)     = 3
open("/usr/lib/locale/locale-archive", O_RDONLY) = 3
open("/proc/meminfo", O_RDONLY|O_CLOEXEC) = 3
open("/usr/lib64/gconv/gconv-modules.cache", O_RDONLY) = 3
open("/etc/profile", O_RDONLY)          = 3
open("/etc/profile.d/", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/colorls.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/cvs.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/ge.sh", O_RDONLY)  = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/glib2.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/lang.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/less.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/modules.sh", O_RDONLY) = 3
open("/usr/share/Modules/init/bash", O_RDONLY) = 3
open("/usr/share/Modules/init/bash_completion", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/qt.sh", O_RDONLY)  = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/set-bmc-url.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/shef-login.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/udisks-bash-completion.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/vim.sh", O_RDONLY) = 3
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/usr/share/locale/locale.alias", O_RDONLY) = 3
open("/usr/share/locale/en_GB.UTF-8/LC_MESSAGES/bash.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en_GB.utf8/LC_MESSAGES/bash.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en_GB/LC_MESSAGES/bash.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en.UTF-8/LC_MESSAGES/bash.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en.utf8/LC_MESSAGES/bash.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en/LC_MESSAGES/bash.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/dev/null", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3
open("/etc/profile.d/which2.sh", O_RDONLY) = 3
open("/home/md1xdrj/.bash_profile", O_RDONLY) = 3
open("/home/md1xdrj/.bashrc", O_RDONLY) = 3
open("/etc/bashrc", O_RDONLY)           = 3
open("/etc/profile.d/modules.sh", O_RDONLY) = 3
open("/usr/share/Modules/init/bash", O_RDONLY) = 3
open("/usr/share/Modules/init/bash_completion", O_RDONLY) = 3
SCRIPT GOT HERE
+++ exited with 0 +++
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; runs a command and &lt;em&gt;traces&lt;/em&gt; the &lt;em&gt;system calls&lt;/em&gt;
(so I suppose &lt;code&gt;strace&lt;/code&gt; is short for &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;Trace&lt;/strong&gt;).
I'm running the command line &lt;code&gt;bash -l -c 'echo SCRIPT GOT HERE'&lt;/code&gt; under &lt;code&gt;strace&lt;/code&gt;.
&lt;code&gt;bash -l&lt;/code&gt; is a &lt;em&gt;login&lt;/em&gt; shell, so it should source my &lt;code&gt;.profile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First thing to notice about running things with &lt;code&gt;strace&lt;/code&gt; is that you get lots of output.
And that's after I've used two options to reduce the ammount of output.
The &lt;code&gt;-e open&lt;/code&gt; option to &lt;code&gt;strace&lt;/code&gt; restricts it so that it only shows &lt;code&gt;open()&lt;/code&gt; system calls;
normally it will show all system calls, which is &lt;em&gt;way&lt;/em&gt; more output.
The &lt;code&gt;-e signal=&lt;/code&gt; option to &lt;code&gt;strace&lt;/code&gt; means that it won't show any signals, without it you see all signals.
Most programs don't see many signals,
but in this case there are a fair number of child process management signals
that are not particularly interesting.&lt;/p&gt;
&lt;p&gt;The first few files are related to C runtimes and dynamic linking (&lt;code&gt;/etc/ld.so.cache&lt;/code&gt;, &lt;code&gt;/lib64/libc.so.6&lt;/code&gt;, and so on).
Then we get &lt;code&gt;/etc/profile&lt;/code&gt;. Aha!
&lt;code&gt;bash&lt;/code&gt; is reading the system wide profile file.
Which it turns out causes it to reading the bag of little profile scripts kept in &lt;code&gt;/etc/profile.d/&lt;/code&gt; (most of which are specific to the Sheffield HPC).&lt;/p&gt;
&lt;p&gt;(I've no idea what the obsession with opening &lt;code&gt;/dev/null&lt;/code&gt; in between every script is by the way; some crazy &lt;code&gt;bash&lt;/code&gt; thing. whatever)&lt;/p&gt;
&lt;p&gt;Then, eventually, near the bottom, we see bash opening &lt;code&gt;/home/md1xdrj/.bash_profile&lt;/code&gt;.
And this is the culprit.
I'm like "wait, WAT!?", "I have a &lt;code&gt;.bash_profile&lt;/code&gt;?"&lt;/p&gt;
&lt;p&gt;It turns out that, yes, I do have a &lt;code&gt;.bash_profile&lt;/code&gt;.
I wasn't expecting that (it wasn't created by me).
A quick perusal of &lt;code&gt;man bash&lt;/code&gt;[*1] reveals that
if &lt;code&gt;~/.bash_profile&lt;/code&gt; exists then it will be sourced and &lt;code&gt;.profile&lt;/code&gt; will not.&lt;/p&gt;
&lt;p&gt;So I remove my &lt;code&gt;~/.bash_profile&lt;/code&gt; and life is good again.&lt;/p&gt;
&lt;h3&gt;Reflection&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; is a great tool and well worth exploring a little bit
(fun fact: you can attach to already running processes with &lt;code&gt;strace -p&lt;/code&gt;).
So in this case I could've read the manual and inspected the file system to see what files &lt;code&gt;bash&lt;/code&gt; would source,
but &lt;code&gt;strace&lt;/code&gt; is more direct.
The manual might be out of date, misunderstood, or just plain wrong.
But &lt;code&gt;strace&lt;/code&gt; cannot lie, it shows me what system calls a tool is actually making.&lt;/p&gt;
&lt;p&gt;The Truth.&lt;/p&gt;
&lt;p&gt;Of course The Truth that &lt;code&gt;strace&lt;/code&gt; provides is really just &lt;em&gt;a&lt;/em&gt; truth.
There is a whole world of complexity that &lt;code&gt;strace&lt;/code&gt; hides from us.
Most obviously, we don't get to see all the instructions
that get executed in between the system calls.
We probably don't want to.
&lt;code&gt;strace&lt;/code&gt; is serving up an abstraction, and that's a useful Truth
to deal with.&lt;/p&gt;
&lt;h3&gt;Fanzine!&lt;/h3&gt;
&lt;p&gt;If you liked this, then you should check out this &lt;a href="https://jvns.ca/blog/2015/04/14/strace-zine/"&gt;strace
fanzine&lt;/a&gt;.
I cannot recommend it enough.
It's enthusiastic, witty, fun to read, and you will learn
something about &lt;code&gt;strace&lt;/code&gt; and system calls (I did!).&lt;/p&gt;
&lt;h3&gt;Footnotes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This is what I call "a joke". Everyone should read &lt;code&gt;man bash&lt;/code&gt;, but it is like Joyce's Ulysses: better read the Cliffs Notes[*2].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are no Cliffs Notes for &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><guid>http://rse.shef.ac.uk/blog/fun-with-strace/</guid><pubDate>Mon, 23 May 2016 09:26:51 GMT</pubDate></item></channel></rss>